;
; File generated by cc65 v 2.18 - Git f8be35b
;
	.fopt		compiler,"cc65 v 2.18 - Git f8be35b"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_rand8
	.import		_vram_adr
	.import		_vram_fill
	.import		_vram_write
	.import		_vram_unrle
	.import		_memfill
	.import		_delay
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_clear_vram_buffer
	.import		_get_pad_new
	.import		_get_ppu_addr
	.import		_seed_rng
	.export		_RoundSprL
	.export		_RoundSprR
	.export		_game_area
	.export		_tick_count
	.export		_pad1
	.export		_pad1_new
	.export		_text
	.export		_state
	.export		_cur_block
	.export		_fall_rate
	.export		_def_z_clust
	.export		_def_z_rev_clust
	.export		_def_line_clust
	.export		_def_box_clust
	.export		_def_tee_clust
	.export		_def_L_clust
	.export		_def_L_rev_clust
	.export		_cluster_defs
	.export		_cur_rot
	.export		_cur_cluster
	.export		_next_cluster
	.export		_cluster_sprites
	.export		_do_line_check
	.export		_line_crush_y
	.export		_horz_button_delay
	.export		_button_delay
	.export		_require_new_down_button
	.export		_game_board
	.export		_empty_row
	.export		_full_row
	.export		_palette_bg
	.export		_palette_sp
	.export		_draw_sprites
	.export		_movement
	.export		_set_block
	.export		_clear_block
	.export		_put_cur_cluster
	.export		_get_block
	.export		_is_block_free
	.export		_is_cluster_colliding
	.export		_spawn_new_cluster
	.export		_rotate_cur_cluster
	.export		_go_to_state
	.export		_debug_fill_nametables
	.export		_debug_draw_board_area
	.export		_main

.segment	"DATA"

_state:
	.byte	$00
_cur_block:
	.byte	$00
	.byte	$00
_fall_rate:
	.byte	$3C
_cluster_defs:
	.addr	_def_z_clust
	.addr	_def_z_rev_clust
	.addr	_def_line_clust
	.addr	_def_box_clust
	.addr	_def_tee_clust
	.addr	_def_L_clust
	.addr	_def_L_rev_clust
_cluster_sprites:
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$15
	.byte	$16
_empty_row:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_full_row:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01

.segment	"RODATA"

_RoundSprL:
	.byte	$FF
	.byte	$FF
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$03
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$12
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$13
	.byte	$00
	.byte	$80
_RoundSprR:
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$01
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$10
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$11
	.byte	$00
	.byte	$80
_game_area:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$B2
	.byte	$E7
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$E4
	.byte	$E7
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$E4
	.byte	$C9
	.byte	$F7
	.byte	$00
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$00
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$87
	.byte	$89
	.byte	$88
	.byte	$8B
	.byte	$A5
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$C0
	.byte	$87
	.byte	$8A
	.byte	$88
	.byte	$8B
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$80
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$00
	.byte	$00
	.byte	$E4
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$99
	.byte	$98
	.byte	$9B
	.byte	$E6
	.byte	$E7
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$00
	.byte	$00
	.byte	$F4
	.byte	$97
	.byte	$A8
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$B1
	.byte	$B1
	.byte	$E6
	.byte	$E7
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$D8
	.byte	$97
	.byte	$A9
	.byte	$AA
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$A7
	.byte	$A8
	.byte	$98
	.byte	$9B
	.byte	$F5
	.byte	$B1
	.byte	$E8
	.byte	$F7
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$D0
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$C9
	.byte	$E8
	.byte	$F6
	.byte	$F7
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$A4
	.byte	$A5
	.byte	$A7
	.byte	$A8
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$D9
	.byte	$F8
	.byte	$F9
	.byte	$A3
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B4
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$A9
	.byte	$98
	.byte	$9B
	.byte	$A2
	.byte	$A2
	.byte	$EA
	.byte	$FA
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$E4
	.byte	$F5
	.byte	$B4
	.byte	$E8
	.byte	$F6
	.byte	$97
	.byte	$99
	.byte	$98
	.byte	$BB
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$9A
	.byte	$9B
	.byte	$E2
	.byte	$E3
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$F4
	.byte	$C9
	.byte	$F6
	.byte	$F6
	.byte	$B4
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$F2
	.byte	$F3
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$D0
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$A7
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$A7
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$E2
	.byte	$E3
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$EA
	.byte	$D1
	.byte	$D3
	.byte	$D3
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$B8
	.byte	$98
	.byte	$9B
	.byte	$E2
	.byte	$F3
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$E0
	.byte	$E1
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$F0
	.byte	$F1
	.byte	$97
	.byte	$B8
	.byte	$98
	.byte	$BB
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$F2
	.byte	$E3
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$B9
	.byte	$BA
	.byte	$9B
	.byte	$87
	.byte	$8B
	.byte	$97
	.byte	$FA
	.byte	$9D
	.byte	$00
	.byte	$C7
	.byte	$00
	.byte	$00
	.byte	$A4
	.byte	$A5
	.byte	$00
	.byte	$E2
	.byte	$E3
	.byte	$A7
	.byte	$98
	.byte	$99
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$FA
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$AD
	.byte	$00
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$90
	.byte	$82
	.byte	$84
	.byte	$85
	.byte	$84
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$A1
	.byte	$92
	.byte	$94
	.byte	$95
	.byte	$94
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$97
	.byte	$9A
	.byte	$98
	.byte	$99
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$BB
	.byte	$00
	.byte	$00
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$DE
	.byte	$9E
	.byte	$9F
	.byte	$00
	.byte	$00
	.byte	$A7
	.byte	$98
	.byte	$98
	.byte	$99
	.byte	$97
	.byte	$9A
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$EC
	.byte	$ED
	.byte	$EE
	.byte	$AE
	.byte	$AF
	.byte	$8C
	.byte	$8C
	.byte	$97
	.byte	$A8
	.byte	$98
	.byte	$B9
	.byte	$97
	.byte	$B8
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$8C
	.byte	$BF
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FE
	.byte	$8C
	.byte	$01
	.byte	$03
	.byte	$97
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$A7
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$CF
	.byte	$8C
	.byte	$8C
	.byte	$CF
	.byte	$8C
	.byte	$8C
	.byte	$8E
	.byte	$01
	.byte	$03
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$A9
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$AB
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$84
	.byte	$85
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$8E
	.byte	$8F
	.byte	$8C
	.byte	$01
	.byte	$07
	.byte	$97
	.byte	$B8
	.byte	$98
	.byte	$98
	.byte	$97
	.byte	$98
	.byte	$9A
	.byte	$9B
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$94
	.byte	$95
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$8C
	.byte	$01
	.byte	$09
	.byte	$8D
	.byte	$8E
	.byte	$01
	.byte	$02
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$8D
	.byte	$8E
	.byte	$01
	.byte	$07
	.byte	$8F
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$8C
	.byte	$01
	.byte	$06
	.byte	$BF
	.byte	$8C
	.byte	$01
	.byte	$05
	.byte	$97
	.byte	$98
	.byte	$98
	.byte	$8C
	.byte	$01
	.byte	$0B
	.byte	$98
	.byte	$98
	.byte	$9B
	.byte	$8C
	.byte	$01
	.byte	$04
	.byte	$AE
	.byte	$8C
	.byte	$01
	.byte	$07
	.byte	$8D
	.byte	$8E
	.byte	$8E
	.byte	$8F
	.byte	$8C
	.byte	$01
	.byte	$09
	.byte	$8D
	.byte	$8E
	.byte	$8E
	.byte	$8F
	.byte	$8C
	.byte	$01
	.byte	$03
	.byte	$BF
	.byte	$8C
	.byte	$01
	.byte	$20
	.byte	$55
	.byte	$55
	.byte	$A7
	.byte	$F5
	.byte	$F5
	.byte	$BD
	.byte	$67
	.byte	$55
	.byte	$55
	.byte	$DD
	.byte	$AA
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$EE
	.byte	$77
	.byte	$D5
	.byte	$FF
	.byte	$AA
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$EE
	.byte	$57
	.byte	$5D
	.byte	$DF
	.byte	$AA
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$EE
	.byte	$75
	.byte	$FF
	.byte	$FF
	.byte	$AA
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$AA
	.byte	$56
	.byte	$51
	.byte	$AA
	.byte	$AA
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$66
	.byte	$55
	.byte	$55
	.byte	$5A
	.byte	$AA
	.byte	$5F
	.byte	$5F
	.byte	$9B
	.byte	$66
	.byte	$55
	.byte	$05
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$01
	.byte	$00
_text:
	.byte	$2D,$20,$50,$52,$45,$53,$53,$20,$53,$54,$41,$52,$54,$20,$2D,$00
_def_z_clust:
	.word	$0C60
	.word	$0264
	.word	$0C60
	.word	$0264
_def_z_rev_clust:
	.word	$06C0
	.word	$8C40
	.word	$06C0
	.word	$8C40
_def_line_clust:
	.word	$00F0
	.word	$4444
	.word	$00F0
	.word	$4444
_def_box_clust:
	.word	$0660
	.word	$0660
	.word	$0660
	.word	$0660
_def_tee_clust:
	.word	$4E00
	.word	$4640
	.word	$0E40
	.word	$4C40
_def_L_clust:
	.word	$0E80
	.word	$C440
	.word	$2E00
	.word	$4460
_def_L_rev_clust:
	.word	$0E20
	.word	$44C0
	.word	$8E00
	.word	$6440
_button_delay:
	.byte	$05
_palette_bg:
	.byte	$3C
	.byte	$01
	.byte	$21
	.byte	$30
	.byte	$3C
	.byte	$22
	.byte	$01
	.byte	$30
	.byte	$3C
	.byte	$0F
	.byte	$1D
	.byte	$22
	.byte	$3C
	.byte	$0F
	.byte	$26
	.byte	$29
_palette_sp:
	.byte	$3C
	.byte	$01
	.byte	$21
	.byte	$30
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
	.byte	$0F
	.byte	$07
	.byte	$28
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
L054E:
	.byte	$47,$41,$4D,$45,$20,$4F,$56,$45,$52,$21,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_tick_count:
	.res	1,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_cur_rot:
	.res	1,$00
_cur_cluster:
	.res	5,$00
_next_cluster:
	.res	5,$00
_do_line_check:
	.res	1,$00
_line_crush_y:
	.res	1,$00
_horz_button_delay:
	.res	1,$00
_require_new_down_button:
	.res	1,$00
.segment	"BSS"
_game_board:
	.res	240,$00

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     decsp4
	jsr     _oam_clear
;
; start_x = (cur_block.x << 3) + BOARD_START_X_PX;
;
	lda     _cur_block
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	ldy     #$03
	sta     (sp),y
;
; start_y = (cur_block.y << 3) + BOARD_START_Y_PX;
;
	lda     _cur_block+1
	asl     a
	asl     a
	asl     a
	dey
	sta     (sp),y
;
; for (iy = 0; iy < 4; ++iy)
;
	lda     #$00
	tay
L05A6:	sta     (sp),y
	cmp     #$04
	bcs     L05A9
;
; for (ix = 0; ix < 4; ++ix)
;
	tya
	iny
L05A5:	sta     (sp),y
	cmp     #$04
	bcs     L03D6
;
; unsigned char bit = ((iy * 4) + (ix & 3)); // &3 = %4
;
	dey
	lda     (sp),y
	asl     a
	asl     a
	sta     ptr1
	iny
	lda     (sp),y
	and     #$03
	clc
	adc     ptr1
	jsr     pusha
;
; if (cur_cluster.layout & (0x8000 >> bit))
;
	ldy     #$00
	lda     (sp),y
	tay
	lda     #$00
	ldx     #$80
	jsr     shraxy
	and     _cur_cluster
	pha
	txa
	and     _cur_cluster+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L03E8
;
; oam_spr(start_x + (ix << 3), start_y + (iy << 3), cur_cluster.sprite, 0);
;
	jsr     decsp3
	ldy     #$05
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	clc
	ldy     #$07
	adc     (sp),y
	ldy     #$02
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	clc
	ldy     #$06
	adc     (sp),y
	ldy     #$01
	sta     (sp),y
	lda     _cur_cluster+4
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; }
;
L03E8:	jsr     incsp1
;
; for (ix = 0; ix < 4; ++ix)
;
	ldy     #$01
	clc
	tya
	adc     (sp),y
	jmp     L05A5
;
; for (iy = 0; iy < 4; ++iy)
;
L03D6:	dey
	clc
	lda     #$01
	adc     (sp),y
	jmp     L05A6
;
; start_x = 15 << 3;
;
L05A9:	lda     #$78
	ldy     #$03
	sta     (sp),y
;
; start_y = 0 << 3;
;
	lda     #$00
	dey
	sta     (sp),y
;
; for (iy = 0; iy < 4; ++iy)
;
	tay
L05A8:	sta     (sp),y
	cmp     #$04
	bcs     L03F7
;
; for (ix = 0; ix < 4; ++ix)
;
	tya
	iny
L05A7:	sta     (sp),y
	cmp     #$04
	bcs     L03F8
;
; unsigned char bit = ((iy * 4) + (ix & 3)); // &3 = %4
;
	dey
	lda     (sp),y
	asl     a
	asl     a
	sta     ptr1
	iny
	lda     (sp),y
	and     #$03
	clc
	adc     ptr1
	jsr     pusha
;
; if (next_cluster.layout & (0x8000 >> bit))
;
	ldy     #$00
	lda     (sp),y
	tay
	lda     #$00
	ldx     #$80
	jsr     shraxy
	and     _next_cluster
	pha
	txa
	and     _next_cluster+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L040A
;
; oam_spr(start_x + (ix << 3), start_y + (iy << 3), next_cluster.sprite, 0);
;
	jsr     decsp3
	ldy     #$05
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	clc
	ldy     #$07
	adc     (sp),y
	ldy     #$02
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	clc
	ldy     #$06
	adc     (sp),y
	ldy     #$01
	sta     (sp),y
	lda     _next_cluster+4
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; }
;
L040A:	jsr     incsp1
;
; for (ix = 0; ix < 4; ++ix)
;
	ldy     #$01
	clc
	tya
	adc     (sp),y
	jmp     L05A7
;
; for (iy = 0; iy < 4; ++iy)
;
L03F8:	dey
	clc
	lda     #$01
	adc     (sp),y
	jmp     L05A8
;
; }
;
L03F7:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; if (pad1_new & PAD_SELECT)
;
	jsr     decsp3
	lda     _pad1_new
	and     #$20
	beq     L05B1
;
; spawn_new_cluster();
;
	jsr     _spawn_new_cluster
;
; if (pad1_new & PAD_A)
;
L05B1:	lda     _pad1_new
	and     #$80
	beq     L05B2
;
; rotate_cur_cluster(1);
;
	lda     #$01
;
; else if (pad1_new & PAD_B)
;
	jmp     L05AE
L05B2:	lda     _pad1_new
	and     #$40
	beq     L05B3
;
; rotate_cur_cluster(-1);
;
	lda     #$FF
L05AE:	jsr     _rotate_cur_cluster
;
; --horz_button_delay;
;
L05B3:	dec     _horz_button_delay
;
; if (((pad1 & PAD_RIGHT) && horz_button_delay == 0) || (pad1_new & PAD_RIGHT))
;
	lda     _pad1
	and     #$01
	beq     L05B7
	lda     _horz_button_delay
	beq     L05BA
L05B7:	lda     _pad1_new
	and     #$01
	beq     L05BC
;
; horz_button_delay = button_delay;
;
L05BA:	lda     _button_delay
	sta     _horz_button_delay
;
; if ((pad1_new & PAD_RIGHT))
;
	lda     _pad1_new
	and     #$01
	beq     L05BB
;
; horz_button_delay <<= 1;
;
	lda     _horz_button_delay
	asl     a
	sta     _horz_button_delay
;
; old_x = cur_block.x;
;
L05BB:	lda     _cur_block
	ldy     #$00
	sta     (sp),y
;
; cur_block.x += 1;
;
	inc     _cur_block
;
; else if (((pad1 & PAD_LEFT) && horz_button_delay == 0) || pad1_new & PAD_LEFT)
;
	jmp     L0436
L05BC:	lda     _pad1
	and     #$02
	beq     L05C0
	lda     _horz_button_delay
	beq     L05C3
L05C0:	lda     _pad1_new
	and     #$02
	beq     L0436
;
; horz_button_delay = button_delay;
;
L05C3:	lda     _button_delay
	sta     _horz_button_delay
;
; if ((pad1_new & PAD_LEFT))
;
	lda     _pad1_new
	and     #$02
	beq     L05C4
;
; horz_button_delay <<= 1;
;
	lda     _horz_button_delay
	asl     a
	sta     _horz_button_delay
;
; old_x = cur_block.x;
;
L05C4:	lda     _cur_block
	ldy     #$00
	sta     (sp),y
;
; cur_block.x -= 1; // note: wrap around
;
	dec     _cur_block
;
; if (is_cluster_colliding())
;
L0436:	jsr     _is_cluster_colliding
	tax
	beq     L05C5
;
; cur_block.x = old_x;
;
	ldy     #$00
	lda     (sp),y
	sta     _cur_block
;
; temp_fall_rate = fall_rate;
;
L05C5:	lda     _fall_rate
	ldy     #$01
	sta     (sp),y
;
; if (pad1_new & PAD_DOWN)
;
	lda     _pad1_new
	and     #$04
	beq     L05C6
;
; require_new_down_button = 0;
;
	lda     #$00
	sta     _require_new_down_button
;
; temp_fall_rate = tick_count;
;
	lda     _tick_count
;
; else if ((pad1 & PAD_DOWN) && require_new_down_button == 0)
;
	jmp     L05B0
L05C6:	lda     _pad1
	and     #$04
	beq     L05CA
	lda     _require_new_down_button
	bne     L05CA
;
; temp_fall_rate >>= 4;
;
	lda     (sp),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
L05B0:	sta     (sp),y
;
; if (tick_count % temp_fall_rate == 0)
;
L05CA:	lda     _tick_count
	jsr     pusha0
	ldy     #$03
	lda     (sp),y
	jsr     tosumoda0
	cpx     #$00
	bne     L045C
	cmp     #$00
	bne     L045C
;
; cur_block.y += 1;
;
	inc     _cur_block+1
;
; hit = 0;
;
L045C:	lda     #$00
	ldy     #$02
	sta     (sp),y
;
; if (is_cluster_colliding())
;
	jsr     _is_cluster_colliding
	tax
	beq     L0463
;
; cur_block.y -= 1;
;
	dec     _cur_block+1
;
; hit = 1;
;
	lda     #$01
	ldy     #$02
	sta     (sp),y
;
; if (hit)
;
L0463:	ldy     #$02
	lda     (sp),y
	beq     L0469
;
; put_cur_cluster();
;
	jsr     _put_cur_cluster
;
; spawn_new_cluster();
;
	jsr     _spawn_new_cluster
;
; }
;
L0469:	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ set_block (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_block: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; address = get_ppu_addr(0, (x << 3) + BOARD_START_X_PX, (y << 3) + BOARD_START_Y_PX);
;
	jsr     decsp4
	lda     #$00
	ldy     #$01
	sta     (sp),y
	ldy     #$06
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	clc
	adc     #$60
	ldy     #$00
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	jsr     _get_ppu_addr
	jsr     stax0sp
;
; one_vram_buffer(id, address);
;
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _one_vram_buffer
;
; game_board[PIXEL_TO_BOARD_INDEX(x,y)] = id;
;
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	sta     ptr1
	stx     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L05CC
	inx
	clc
L05CC:	adc     #<(_game_board)
	sta     ptr1
	txa
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #$02
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ clear_block (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_block: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; set_block(x, y, 0);
;
	jsr     decsp2
	ldy     #$03
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	tya
	jsr     _set_block
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ put_cur_cluster (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_cur_cluster: near

.segment	"CODE"

;
; do_line_check = 1;
;
	jsr     decsp2
	lda     #$01
	sta     _do_line_check
;
; for (iy = 0; iy < 4; ++iy)
;
	lda     #$00
	tay
L05D0:	sta     (sp),y
	cmp     #$04
	bcs     L0488
;
; for (ix = 0; ix < 4; ++ix)
;
	tya
	iny
L05CF:	sta     (sp),y
	cmp     #$04
	bcs     L0489
;
; unsigned char bit = ((iy * 4) + (ix & 3)); // &3 = %4
;
	dey
	lda     (sp),y
	asl     a
	asl     a
	sta     ptr1
	iny
	lda     (sp),y
	and     #$03
	clc
	adc     ptr1
	jsr     pusha
;
; if (cur_cluster.layout & (0x8000 >> bit))
;
	ldy     #$00
	lda     (sp),y
	tay
	lda     #$00
	ldx     #$80
	jsr     shraxy
	and     _cur_cluster
	pha
	txa
	and     _cur_cluster+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L049B
;
; set_block(cur_block.x + ix, cur_block.y + iy, cur_cluster.sprite);
;
	jsr     decsp2
	ldy     #$04
	lda     (sp),y
	clc
	adc     _cur_block
	ldy     #$01
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	clc
	adc     _cur_block+1
	ldy     #$00
	sta     (sp),y
	lda     _cur_cluster+4
	jsr     _set_block
;
; }
;
L049B:	jsr     incsp1
;
; for (ix = 0; ix < 4; ++ix)
;
	ldy     #$01
	clc
	tya
	adc     (sp),y
	jmp     L05CF
;
; for (iy = 0; iy < 4; ++iy)
;
L0489:	dey
	clc
	lda     #$01
	adc     (sp),y
	jmp     L05D0
;
; }
;
L0488:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_block (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_block: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; return game_board[PIXEL_TO_BOARD_INDEX(x,y)];
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax10
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L05D2
	inx
L05D2:	sta     ptr1
	txa
	clc
	adc     #>(_game_board)
	sta     ptr1+1
	ldy     #<(_game_board)
	ldx     #$00
	lda     (ptr1),y
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ is_block_free (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_block_free: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; if (y > BOARD_END_Y_PX_BOARD || x > BOARD_END_X_PX_BOARD)
;
	ldy     #$00
	lda     (sp),y
	cmp     #$18
	bcs     L05D3
	iny
	lda     (sp),y
	cmp     #$0A
	bcc     L05D4
;
; return 0;
;
L05D3:	ldx     #$00
	txa
	jmp     incsp2
;
; return get_block(x, y) == 0;
;
L05D4:	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _get_block
	cmp     #$00
	jsr     booleq
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ is_cluster_colliding (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_cluster_colliding: near

.segment	"CODE"

;
; for (iy = 0; iy < 4; ++iy)
;
	jsr     decsp2
	lda     #$00
	tay
L05D8:	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	cmp     #$04
	bcs     L05D9
;
; for (ix = 0; ix < 4; ++ix)
;
	txa
	iny
L05D7:	sta     (sp),y
	cmp     #$04
	bcs     L04B3
;
; unsigned char bit = ((iy * 4) + (ix & 3)); // &3 = %4
;
	dey
	lda     (sp),y
	asl     a
	asl     a
	sta     ptr1
	iny
	lda     (sp),y
	and     #$03
	clc
	adc     ptr1
	jsr     pusha
;
; if (cur_cluster.layout & (0x8000 >> bit))
;
	ldy     #$00
	lda     (sp),y
	tay
	lda     #$00
	ldx     #$80
	jsr     shraxy
	and     _cur_cluster
	pha
	txa
	and     _cur_cluster+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L04C8
;
; if (!is_block_free(cur_block.x + ix, cur_block.y + iy))
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     _cur_block
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	clc
	adc     _cur_block+1
	jsr     _is_block_free
	tax
	bne     L04C8
;
; return 1;
;
	lda     #$01
	jsr     incsp1
	jmp     incsp2
;
; }
;
L04C8:	jsr     incsp1
;
; for (ix = 0; ix < 4; ++ix)
;
	ldy     #$01
	clc
	tya
	adc     (sp),y
	jmp     L05D7
;
; for (iy = 0; iy < 4; ++iy)
;
L04B3:	dey
	clc
	lda     #$01
	adc     (sp),y
	jmp     L05D8
;
; return 0;
;
L05D9:	txa
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ spawn_new_cluster (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawn_new_cluster: near

.segment	"CODE"

;
; require_new_down_button = 1;
;
	jsr     decsp1
	lda     #$01
	sta     _require_new_down_button
;
; cur_block.x = 3; //(BOARD_END_Y_PX_BOARD >> 1);
;
	lda     #$03
	sta     _cur_block
;
; cur_block.y = 0;
;
	lda     #$00
	sta     _cur_block+1
;
; cur_rot = 0;
;
	sta     _cur_rot
;
; cur_cluster.def = next_cluster.def;
;
	lda     _next_cluster+2
	ldx     _next_cluster+2+1
	sta     _cur_cluster+2
	stx     _cur_cluster+2+1
;
; cur_cluster.layout = cur_cluster.def[0];
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _cur_cluster+1
	dey
	lda     (ptr1),y
	sta     _cur_cluster
;
; cur_cluster.sprite = next_cluster.sprite;
;
	lda     _next_cluster+4
	sta     _cur_cluster+4
;
; id = rand8() % NUM_CLUSTERS;
;
	jsr     _rand8
	jsr     pushax
	lda     #$07
	jsr     tosumoda0
	ldy     #$00
	sta     (sp),y
;
; next_cluster.def = cluster_defs[id]; // def_z_rev_clust;
;
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L05DC
	inx
	clc
L05DC:	adc     #<(_cluster_defs)
	sta     ptr1
	txa
	adc     #>(_cluster_defs)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     _next_cluster+2
	stx     _next_cluster+2+1
;
; next_cluster.layout = next_cluster.def[0];
;
	sta     ptr1
	stx     ptr1+1
	iny
	lda     (ptr1),y
	sta     _next_cluster+1
	dey
	lda     (ptr1),y
	sta     _next_cluster
;
; next_cluster.sprite = cluster_sprites[id];
;
	lda     (sp),y
	tay
	lda     _cluster_sprites,y
	sta     _next_cluster+4
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ rotate_cur_cluster (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_rotate_cur_cluster: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; old_rot = cur_rot;
;
	jsr     decsp1
	lda     _cur_rot
	ldy     #$00
	sta     (sp),y
;
; cur_rot = (cur_rot + dir) & 3; // % 4
;
	iny
	lda     (sp),y
	clc
	adc     _cur_rot
	and     #$03
	sta     _cur_rot
;
; cur_cluster.layout = cur_cluster.def[cur_rot];
;
	ldx     #$00
	lda     _cur_rot
	asl     a
	bcc     L05E0
	inx
	clc
L05E0:	adc     _cur_cluster+2
	sta     ptr1
	txa
	adc     _cur_cluster+2+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _cur_cluster+1
	dey
	lda     (ptr1),y
	sta     _cur_cluster
;
; if (is_cluster_colliding())
;
	jsr     _is_cluster_colliding
	tax
	beq     L04F3
;
; cur_rot = old_rot;
;
	ldy     #$00
	lda     (sp),y
	sta     _cur_rot
;
; cur_cluster.layout = cur_cluster.def[cur_rot];
;
	ldx     #$00
	lda     _cur_rot
	asl     a
	bcc     L05E1
	inx
	clc
L05E1:	adc     _cur_cluster+2
	sta     ptr1
	txa
	adc     _cur_cluster+2+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _cur_cluster+1
	dey
	lda     (ptr1),y
	sta     _cur_cluster
;
; }
;
L04F3:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ go_to_state (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_go_to_state: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; fade_delay = 5;
;
	jsr     decsp5
	lda     #$05
	ldy     #$00
	sta     (sp),y
;
; switch (state)
;
	lda     _state
;
; }
;
	cmp     #$02
	bne     L04FF
;
; fade_from_bright = 1;
;
	lda     #$01
	iny
	sta     (sp),y
;
; state = new_state;
;
L04FF:	ldy     #$05
	lda     (sp),y
	sta     _state
;
; switch (state)
;
	lda     _state
;
; }
;
	bne     L05E2
;
; }
;
	jmp     incsp6
;
; }
;
L05E2:	cmp     #$01
	beq     L050D
	cmp     #$02
	beq     L0534
	jmp     incsp6
;
; ppu_off(); // screen off
;
L050D:	jsr     _ppu_off
;
; vram_adr(NTADR_A(0,0));
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(game_area);
;
	lda     #<(_game_area)
	ldx     #>(_game_area)
	jsr     _vram_unrle
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; memfill(game_board, 0, BOARD_SIZE);
;
	jsr     decsp3
	lda     #<(_game_board)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_game_board)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$F0
	jsr     _memfill
;
; spawn_new_cluster();
;
	jsr     _spawn_new_cluster
;
; spawn_new_cluster();
;
	jsr     _spawn_new_cluster
;
; if (fade_from_bright)
;
	ldy     #$01
	lda     (sp),y
	beq     L051F
;
; pal_bright(7);
;
	lda     #$07
	jsr     _pal_bright
;
; delay(fade_delay);
;
	ldy     #$00
	lda     (sp),y
	jsr     _delay
;
; pal_bright(6);
;
	lda     #$06
	jsr     _pal_bright
;
; delay(fade_delay);
;
	ldy     #$00
	lda     (sp),y
	jsr     _delay
;
; pal_bright(5);
;
	lda     #$05
	jsr     _pal_bright
;
; delay(fade_delay);
;
	ldy     #$00
	lda     (sp),y
	jsr     _delay
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; delay(fade_delay);
;
	ldy     #$00
	lda     (sp),y
	jsr     _delay
;
; require_new_down_button = 1;
;
L051F:	lda     #$01
	sta     _require_new_down_button
;
; break;
;
	jmp     incsp6
;
; delay(60);
;
L0534:	lda     #$3C
	jsr     _delay
;
; oam_clear();
;
	jsr     _oam_clear
;
; pal_bright(5);
;
	lda     #$05
	jsr     _pal_bright
;
; delay(fade_delay);
;
	ldy     #$00
	lda     (sp),y
	jsr     _delay
;
; pal_bright(6);
;
	lda     #$06
	jsr     _pal_bright
;
; delay(fade_delay);
;
	ldy     #$00
	lda     (sp),y
	jsr     _delay
;
; pal_bright(7);
;
	lda     #$07
	jsr     _pal_bright
;
; delay(fade_delay);
;
	ldy     #$00
	lda     (sp),y
	jsr     _delay
;
; pal_bright(8);
;
	lda     #$08
	jsr     _pal_bright
;
; delay(fade_delay);
;
	ldy     #$00
	lda     (sp),y
	jsr     _delay
;
; address = get_ppu_addr(0, 96, 112);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	lda     #$70
	jsr     _get_ppu_addr
	ldy     #$03
	jsr     staxysp
;
; multi_vram_buffer_horz("GAME OVER!", 10, address);
;
	jsr     decsp3
	lda     #<(L054E)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L054E)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _multi_vram_buffer_horz
;
; pal_bright(7);
;
	lda     #$07
	jsr     _pal_bright
;
; delay(fade_delay);
;
	ldy     #$00
	lda     (sp),y
	jsr     _delay
;
; pal_bright(6);
;
	lda     #$06
	jsr     _pal_bright
;
; delay(fade_delay);
;
	ldy     #$00
	lda     (sp),y
	jsr     _delay
;
; pal_bright(5);
;
	lda     #$05
	jsr     _pal_bright
;
; delay(fade_delay);
;
	ldy     #$00
	lda     (sp),y
	jsr     _delay
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; delay(fade_delay);
;
	ldy     #$00
	lda     (sp),y
	jsr     _delay
;
; break;
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ debug_fill_nametables (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_debug_fill_nametables: near

.segment	"CODE"

;
; vram_adr(NTADR_A(0,0));
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill('a', NAMETABLE_PATTERN_SIZE);
;
	lda     #$61
	jsr     pusha
	ldx     #$03
	lda     #$C0
	jsr     _vram_fill
;
; vram_adr(NTADR_B(0,0));
;
	ldx     #$24
	lda     #$00
	jsr     _vram_adr
;
; vram_fill('b', NAMETABLE_PATTERN_SIZE);
;
	lda     #$62
	jsr     pusha
	ldx     #$03
	lda     #$C0
	jsr     _vram_fill
;
; vram_adr(NTADR_B(0,0));
;
	ldx     #$24
	lda     #$00
	jsr     _vram_adr
;
; vram_fill('c', NAMETABLE_PATTERN_SIZE);
;
	lda     #$63
	jsr     pusha
	ldx     #$03
	lda     #$C0
	jsr     _vram_fill
;
; vram_adr(NTADR_D(0,0));
;
	ldx     #$2C
	lda     #$00
	jsr     _vram_adr
;
; vram_fill('d', NAMETABLE_PATTERN_SIZE);
;
	lda     #$64
	jsr     pusha
	ldx     #$03
	lda     #$C0
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ debug_draw_board_area (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_debug_draw_board_area: near

.segment	"CODE"

;
; oam_spr(BOARD_START_X_PX, BOARD_START_Y_PX, 0x01, 0);
;
	jsr     decsp3
	lda     #$60
	ldy     #$02
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(BOARD_END_X_PX, BOARD_START_Y_PX, 0x01, 0);
;
	jsr     decsp3
	lda     #$A8
	ldy     #$02
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(BOARD_START_X_PX, BOARD_END_Y_PX, 0x01, 0);
;
	jsr     decsp3
	lda     #$60
	ldy     #$02
	sta     (sp),y
	lda     #$B8
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(BOARD_END_X_PX, BOARD_END_Y_PX, 0x01, 0);
;
	jsr     decsp3
	lda     #$A8
	ldy     #$02
	sta     (sp),y
	lda     #$B8
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	tya
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     decsp3
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; vram_adr(NTADR_A(16-(sizeof(text)>>1),20));
;
	ldx     #$22
	lda     #$88
	jsr     _vram_adr
;
; vram_write(text, sizeof(text)-1); // -1 null term
;
	lda     #<(_text)
	ldx     #>(_text)
	jsr     pushax
	ldx     #$00
	lda     #$0F
	jsr     _vram_write
;
; scroll(0, 239); // shift the bg down 1 pixel
;
	jsr     push0
	lda     #$EF
	jsr     _scroll
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L036F:	jsr     _ppu_wait_nmi
;
; tick_count++;
;
	inc     _tick_count
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; clear_vram_buffer(); // do at the beginning of each frame
;
	jsr     _clear_vram_buffer
;
; switch(state)
;
	lda     _state
;
; }
;
	beq     L05E6
	cmp     #$01
	beq     L0387
	cmp     #$02
	jeq     L05EA
	jmp     L036F
;
; if (pad1_new & PAD_START)
;
L05E6:	lda     _pad1_new
	and     #$10
	beq     L036F
;
; seed_rng();
;
	jsr     _seed_rng
;
; go_to_state(STATE_GAME);
;
	lda     #$01
	jsr     _go_to_state
;
; break;
;
	jmp     L036F
;
; if (do_line_check)
;
L0387:	lda     _do_line_check
	beq     L05E8
;
; do_line_check = 0;
;
	lda     #$00
	sta     _do_line_check
;
; for (iy = BOARD_END_Y_PX_BOARD; iy > BOARD_OOB_END; --iy)
;
	lda     #$17
	ldy     #$01
L05E4:	sta     (sp),y
	cmp     #$04
	bcc     L05E8
;
; line_complete = 1;
;
	tya
	dey
	sta     (sp),y
;
; for (ix = 0; ix <= BOARD_END_X_PX_BOARD; ++ix)
;
	tya
	ldy     #$02
L05E3:	sta     (sp),y
	cmp     #$0A
	bcs     L0397
;
; if (is_block_free(ix, iy))
;
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     _is_block_free
	tax
	beq     L0398
;
; line_complete = 0;
;
	lda     #$00
	tay
	sta     (sp),y
;
; break;
;
	jmp     L05E7
;
; for (ix = 0; ix <= BOARD_END_X_PX_BOARD; ++ix)
;
L0398:	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L05E3
;
; if (line_complete)
;
L0397:	ldy     #$00
L05E7:	lda     (sp),y
	beq     L038E
;
; line_crush_y = iy;
;
	iny
	lda     (sp),y
	sta     _line_crush_y
;
; break;
;
	jmp     L05E8
;
; for (iy = BOARD_END_Y_PX_BOARD; iy > BOARD_OOB_END; --iy)
;
L038E:	iny
	lda     (sp),y
	sec
	sbc     #$01
	jmp     L05E4
;
; if (line_crush_y > BOARD_OOB_END)
;
L05E8:	lda     _line_crush_y
	cmp     #$04
	bcc     L03A8
;
; for(ix = 0; ix <= BOARD_END_X_PX_BOARD; ++ix)
;
	lda     #$00
	ldy     #$02
L05E5:	sta     (sp),y
	cmp     #$0A
	bcs     L05E9
;
; set_block(ix, line_crush_y, get_block(ix, line_crush_y-1));
;
	jsr     decsp2
	ldy     #$04
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	lda     _line_crush_y
	dey
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	jsr     pusha
	lda     _line_crush_y
	sec
	sbc     #$01
	jsr     _get_block
	jsr     _set_block
;
; for(ix = 0; ix <= BOARD_END_X_PX_BOARD; ++ix)
;
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L05E5
;
; --line_crush_y;
;
L05E9:	dec     _line_crush_y
;
; if (line_crush_y == BOARD_OOB_END)
;
	lda     _line_crush_y
	cmp     #$03
	bne     L03BE
;
; do_line_check = 1;
;
	lda     #$01
	sta     _do_line_check
;
; else
;
	jmp     L03BE
;
; movement();
;
L03A8:	jsr     _movement
;
; draw_sprites();
;
L03BE:	jsr     _draw_sprites
;
; if (pad1_new & PAD_START)
;
	lda     _pad1_new
	and     #$10
	jeq     L036F
;
; go_to_state(STATE_OVER);
;
	lda     #$02
	jsr     _go_to_state
;
; break;
;
	jmp     L036F
;
; if (pad1_new & PAD_START)
;
L05EA:	lda     _pad1_new
	and     #$10
	jeq     L036F
;
; go_to_state(STATE_GAME);
;
	lda     #$01
	jsr     _go_to_state
;
; break;
;
	jmp     L036F

.endproc

